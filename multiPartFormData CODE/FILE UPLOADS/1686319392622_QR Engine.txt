package com.ekaplus.restController;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.SecureRandom;

import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import de.taimos.totp.TOTP;

public class DummyRun {

	
	 public static String getTOTPCode(String secretKey) {
		    Base32 base32 = new Base32();
		    byte[] bytes = base32.decode(secretKey);
		    String hexKey = Hex.encodeHexString(bytes);
		    return TOTP.getOTP(hexKey);
		}
	 
	 public void generateQRCode() {

	 		/*SecureRandom random = new SecureRandom();
	 	    byte[] bytes = new byte[20];
	 	    random.nextBytes(bytes);
	 	    Base32 base32 = new Base32();*/
	 	  
	 	    String secretKey = "ESBC6WZ73KK3WNX7XHXCZGSX2UQTUOFC";//base32.encodeToString(bytes);
	 		
	 	    
	 	   String userEmail = "eshaan.saxena@eka1.com";
	 	  String companyName = "CHS Broadbent";
	 	  String barCodeUrl = getGoogleAuthenticatorBarCode(secretKey, userEmail, companyName);
	 	 System.out.println(secretKey);
	 	  System.out.println(barCodeUrl);
	 	    
	 	 try {
			createQRCode(barCodeUrl ,"C:\\QRCodeAuth\\QR.png" ,200,200);
		} catch (WriterException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	 		
	 	   String lastCode = null;
	 	  while (true) {
	 	      String code = getTOTPCode(secretKey);
	 	      if (!code.equals(lastCode)) {
	 	          System.out.println(code);
	 	      }
	 	      lastCode = code;
	 	      try {
	 	          Thread.sleep(1000);
	 	      } catch (InterruptedException e) {};
	 	  }
	 		
	 }
	
	 
	 public static void createQRCode(String barCodeData, String filePath, int height, int width)
		        throws WriterException, IOException {
		    BitMatrix matrix = new MultiFormatWriter().encode(barCodeData, BarcodeFormat.QR_CODE,
		            width, height);
		    try{
		   /*sample  	
		    BitMatrix bits = new QRCodeWriter().encode(barCodeData, BarcodeFormat.QR_CODE, 200, 200);
		    ByteArrayOutputStream out1 = new ByteArrayOutputStream();
		    MatrixToImageWriter.writeToStream(bits, "PNG", out1);
		    	String qrCodeString = new Base64().encodeToString(out1.toByteArray());
		    sample closed */
		    	
		    	FileOutputStream out = new FileOutputStream(filePath);
		        MatrixToImageWriter.writeToStream(matrix, "png", out);
		    }catch(Throwable e1) {
		    	e1.printStackTrace();
		    }
		}
	 
	 public static String getGoogleAuthenticatorBarCode(String secretKey, String account, String issuer) {
		    try {
		        return "otpauth://totp/"
		                + URLEncoder.encode(issuer + ":" + account, "UTF-8").replace("+", "%20")
		                + "?secret=" + URLEncoder.encode(secretKey, "UTF-8").replace("+", "%20")
		                + "&issuer=" + URLEncoder.encode(issuer, "UTF-8").replace("+", "%20");
		    } catch (UnsupportedEncodingException e) {
		        throw new IllegalStateException(e);
		    }
		}
	 
	 
	public static void main(String gg[] ) {
		
		DummyRun d = new DummyRun();
		d.generateQRCode();
		
	}
	
}
